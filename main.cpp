class Solution {
public:
    int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial) {
        int n = graph.size();
        vector<int> roots(n);
        for (auto i = 0; i < n; i++) roots[i] = i;
        
        auto find = [&](int id) {
            while (roots[id] != id) {
                roots[id] = roots[roots[id]];
                id = roots[id];
            }
            return id;
        };
        
        
        vector<int> clean;
        set<int> initial_set(initial.begin(), initial.end());
        for (auto i = 0; i < n; i++)
            if (!initial_set.count(i)) clean.push_back(i);
        
        
        for (auto i : clean)
            for (auto j : clean)
                if (i != j && graph[i][j])
                    roots[find(i)] = find(j);
        
        
        vector<int> area(n, 0);
        for (auto i : clean) area[find(i)]++;
        
        map<int, set<int>> infect_node; 
        map<int, int> infect_count; 
        for (auto i : initial) {
            for (auto j : clean) {
                if (graph[i][j]) infect_node[i].insert(find(j));
            }
            for (auto j : infect_node[i])
                infect_count[j] += 1;
        }
        
        
        int res = initial[0], max_cnt = -1;
        for (auto& [malware, nodes] : infect_node) {
            int count = 0;
            for (auto& node : nodes) {
                
                if (infect_count[node] == 1)
                    count += area[node];
            }
            if (count > max_cnt || (count >= max_cnt && malware < res)) {
                max_cnt = count;
                res = malware;
            }
        }
        
        return res;
    }
};
